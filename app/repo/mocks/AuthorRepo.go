// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	dto "blog/app/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthorRepo is an autogenerated mock type for the AuthorRepo type
type AuthorRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: authorReq
func (_m *AuthorRepo) Create(authorReq *dto.AuthorCreateRequest) (int64, error) {
	ret := _m.Called(authorReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.AuthorCreateRequest) (int64, error)); ok {
		return rf(authorReq)
	}
	if rf, ok := ret.Get(0).(func(*dto.AuthorCreateRequest) int64); ok {
		r0 = rf(authorReq)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*dto.AuthorCreateRequest) error); ok {
		r1 = rf(authorReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *AuthorRepo) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *AuthorRepo) GetAll() (*[]dto.AuthorResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]dto.AuthorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]dto.AuthorResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]dto.AuthorResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.AuthorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *AuthorRepo) GetOne(id int) (*dto.AuthorResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *dto.AuthorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*dto.AuthorResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *dto.AuthorResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableName provides a mock function with given fields:
func (_m *AuthorRepo) TableName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TableName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields: authorUpdateReq
func (_m *AuthorRepo) Update(authorUpdateReq *dto.AuthorUpdateRequest) error {
	ret := _m.Called(authorUpdateReq)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.AuthorUpdateRequest) error); ok {
		r0 = rf(authorUpdateReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorRepo creates a new instance of AuthorRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorRepo {
	mock := &AuthorRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
