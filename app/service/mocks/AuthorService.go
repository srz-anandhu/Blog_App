// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	dto "blog/app/dto"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AuthorService is an autogenerated mock type for the AuthorService type
type AuthorService struct {
	mock.Mock
}

// CreateAuthor provides a mock function with given fields: r
func (_m *AuthorService) CreateAuthor(r *http.Request) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthor")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthor provides a mock function with given fields: r
func (_m *AuthorService) DeleteAuthor(r *http.Request) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthor provides a mock function with given fields: r
func (_m *AuthorService) GetAuthor(r *http.Request) (*dto.AuthorResponse, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthor")
	}

	var r0 *dto.AuthorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*dto.AuthorResponse, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *dto.AuthorResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthors provides a mock function with given fields:
func (_m *AuthorService) GetAuthors() (*[]dto.AuthorResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthors")
	}

	var r0 *[]dto.AuthorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]dto.AuthorResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]dto.AuthorResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.AuthorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthor provides a mock function with given fields: r
func (_m *AuthorService) UpdateAuthor(r *http.Request) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorService creates a new instance of AuthorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorService {
	mock := &AuthorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
